library(shiny)
A <- matrix(seq(from=1,to=6), nrow=2, byrow=T)
B <- matrix(seq(from=12,to=7), nrow=2)
A + B
A + B
A
A %*% t(B)
A %*% t(B)
t(A) %*% B
A
B
12+20+24
t(A)
1:5
1:5
n(1:n)
n = 3
sum(1:5)
sum(1:3)
E <-c()
E[1] <- 1
E
m <- array(c(1,2,-1,1,-1,-2,3,5,4), c(3,3))
E[1] <- m
E
E <-c()
E[1] <- m
E
m
E <-list()
E[1] <- m
e
E
y <- matrix(1:300, 100, 3)
rep = 200
matList <- lapply(1:ncol(y), function(i) replicate(rep, y[,i]))
matList
y <- matrix(1:3, 3, 3)
rep = 2
matList <- lapply(1:ncol(y), function(i) replicate(rep, y[,i]))
matList
A <- diag(3)
A
n <-nrow(A)
matList <- lapply(1:sum(1:n-1), function(i) diag(n))
matList
A <- diag(5)
n <-nrow(A)
matList <- lapply(1:sum(1:n-1), function(i) diag(n))
a
A
len(matList)
length(matList)
matList
E[1][1,1]
E[1][1]
E[1]
n <-nrow(A)
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
E
E[1]
E[1][1,]
E[1][1]
E[1,]
E[1]E[1,]
E[1](1,)
E[1]
E[1]{1,}
E[1][1]
E[1][1,1]
E[1][2]
E[1[1,1]]
E[[1]][1,]
E[[1]][2,]
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
E
for (i in 2:n){
for (j in 1:i-1){
E[[x]][i,j] <- 9
x <- x + 1
}
}
}
for (i in 2:n){
for (j in 1:i-1){
E[[x]][i,j] <- 9
x <- x + 1
}
}
E
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:i-1){
E[[x]][i,j] <- 9
x <- x + 1
}
}
E
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:i){
E[[x]][i,j] <- 9
x <- x + 1
}
}
E
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:i){
print (i)
print(j)
E[[x]][i,j] <- 9
x <- x + 1
}
}
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:i){
print (i)
E[[x]][i,j] <- 9
x <- x + 1
}
}
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:i){
print (j)
E[[x]][i,j] <- 9
x <- x + 1
}
}
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:i-1){
print (j)
E[[x]][i,j] <- 9
x <- x + 1
}
}
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in sum(1:i-1)){
print (j)
E[[x]][i,j] <- 9
x <- x + 1
}
}
1:1
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1){
print (j)
E[[x]][i,j] <- 9
x <- x + 1
}
}
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1){
print (j)
E[[x]][i,j] <- 9
x <- x + 1
}
}
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1)){
print (j)
E[[x]][i,j] <- 9
x <- x + 1
}
}
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
A <-diag(3)
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1)){
print (j)
E[[x]][i,j] <- 9
x <- x + 1
}
}
E
A <- matrix(c(1,2,3,1,1,1,2,0,1),nrow=3)
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1)){
E[[x]][i,j] <- - A[(i-1),j]/A[i,j]
U <- E[x]U
x <- x + 1
}
}
E
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1)){
E[[x]][i,j] <- -A[(i-1),j]/A[i,j]
U <- E[x] %*% U
x <- x + 1
}
}
E[1]
E[1] %*% U
matrix(E[1]) %*% U
matrix(E[1]) %*% matrix(U)
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1)){
E[[x]][i,j] <- -A[(i-1),j]/A[i,j]
#U <- E[x] %*% U
x <- x + 1
}
}
E
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1)){
E[[x]][i,j] <- -A[(i),j]/A[i-1,j]
#U <- E[x] %*% U
x <- x + 1
}
}
E
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1)){
E[[x]][i,j] <- -U[(i),j]/U[i-1,j]
U <- E[x] * U
x <- x + 1
}
}
A <- matrix(c(1,2,3,1,1,1,2,0,1),nrow=3)
A %*% U
E[1] %*% U
E[1]
E[[1]]
E[[1]] %*% U
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1)){
E[[x]][i,j] <- -U[(i),j]/U[i-1,j]
U <- E[[x]] * U
x <- x + 1
}
}
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1)){
E[[x]][i,j] <- -U[(i),j]/U[i-1,j]
U <- E[[x]] * U
x <- x + 1
}
}
E
U
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1)){
E[[x]][i,j] <- -U[(i),j]/U[i-1,j]
U <- E[[x]] %*% U
x <- x + 1
}
}
E
E[[1]] %*% A
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1)){
E[[x]][i,j] <- -U[i,j]/U[(i-1),j]
U <- E[[x]] %*% U
x <- x + 1
}
}
E
E[[x]][i,j] <- -U[i,j]/U[j,j]
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
for (i in 2:n){
for (j in 1:(i-1)){
E[[x]][i,j] <- -U[i,j]/U[j,j]
U <- E[[x]] %*% U
x <- x + 1
}
}
E
n <-nrow(A)
U <- A
x <- 1
E <- lapply(1:sum(1:n-1), function(i) diag(n)) #Creates list of Identity Matrix
E_inv <-list()
for (i in 2:n){
for (j in 1:(i-1)){
E[[x]][i,j] <- -U[i,j]/U[j,j]
U <- E[[x]] %*% U
E_inv[[x]] <- solve(E[[x]])
x <- x + 1
}
}
E_inv
E[[1]] %*% E[[]]2
E[[1]] %*% E[[2]]
V <- E[[1]] %*% E[[2]]
V <- V %*% E[[3]]
V
AS
A
v<- c(-1,1,0,1,3,-2,5,0,1)
matrix(v,nrow=3)
A <- matrix(v,nrow=3)
t(A)
X <- A %*% A_T
Y <- A_T %*% A
A <- matrix(v,nrow=3)
A_T <- t(A)
X
X <- A %*% A_T
Y <- A_T %*% A
X
Y
eigen(X)
svd(A)
b_n <- 1:14
b_n
b_n[1]
b_n[2]
b_n <-list()
b_n[1] <- 50000
b_n
b_n[1]
b_n[1]*0.1
b_n[1] +1
b_n[1]
b_n+1
1+1
n <-1:16
y <- n *5
y
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("magrittr")
library(shiny)
library(RCurl)
url <- "https://raw.githubusercontent.com/jlaurito/CUNY_IS608/master/lecture3/data/cleaned-cdc-mortality-1999-2010.csv"
dat <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
dat <- read.csv(text=dat)
dataTotal <-data.frame(dat)
ICDNames <- unique(as.character(dataTotal$ICD.Chapter))
State <- unique(as.character(dataTotal$State))
dataTotal
head(dataTotal)
dataSubset<- drop(ICD.Chapter)
dataSubset<- drop(dataTotal$ICD.Chapter)
library(dplyr)
head(dataTotal)
dataSubset %>% select(State,Year, Deaths, Population)
dataSubset %<% select(State,Year, Deaths, Population)
dataTotal %>% select(State,Year, Deaths, Population)
dataSubset<- dataTotal  %<%
select(Year, Deaths, Population) %<%
group_by(Year) %<%
summarize(n=sum(Deaths),nm =sum(Population))
dataSubset<- dataTotal  %>%
select(Year, Deaths, Population) %>%
group_by(Year) %>%
summarize(n=sum(Deaths),nm =sum(Population))
View(dataSubset)
dataSubset<- dataTotal  %<% select(State,Year, Deaths, Population)
warning()
dataSubset<- dataTotal  %>%
select(Year, Deaths, Population) %>%
group_by(Year) %>%
summarize(Deaths=sum(Deaths) & Population=sum(Population))
dataSubset<- dataTotal  %>%
select(Year, Deaths, Population) %>%
group_by(Year)
View(dataSubset)
View(dataSubset)
View(dataSubset)
View(dataSubset)
dataSubset<- dataTotal  %>%
select(Year, Deaths, Population) %>%
group_by(Year) %>%
summarize(Deaths=sum(Deaths), Population=sum(Population))
warning()
View(dataSubset)
dataSubset<- dataTotal  %>%
select(Year, Deaths, Population) %>%
group_by(Year) %>%
summarize(Deaths=sum(Deaths), Population=sum(as.numeric(Population)))
View(dataSubset)
dataYear<- dataTotal  %>%
select(Year, Deaths, Population) %>%
group_by(Year) %>%
summarize(Deaths=sum(Deaths), Population=sum(as.numeric(Population)))
dataYear$Crude.Rate <- (sum(as.numeric(dataVar$Deaths))/sum(as.numeric(dataVar$Population))*100000)
dataYear<- dataTotal  %>%
select(Year, Deaths, Population) %>%
group_by(Year) %>%
summarize(Deaths=sum(Deaths), Population=sum(as.numeric(Population)))
dataYear$Crude.Rate <- (sum(as.numeric(dataYear$Deaths))/sum(as.numeric(dataYear$Population))*100000)
View(dataYear)
dataYear$Crude.Rate <- sapply(sum(as.numeric(dataYear$Deaths))/sum(as.numeric(dataYear$Population))*100000)
dataYear<- dataTotal  %>%
select(Year, Deaths, Population) %>%
group_by(Year) %>%
summarize(Deaths=sum(Deaths), Population=sum(as.numeric(Population)))
dataYear$Crude.Rate <- (as.numeric(dataYear$Deaths)/as.numeric(dataYear$Population))*100000)
dataYear$Crude.Rate <- (as.numeric(dataYear$Deaths)/as.numeric(dataYear$Population))*100000
dataYear<- dataTotal  %>%
select(Year, Deaths, Population) %>%
group_by(Year) %>%
summarize(Deaths=sum(Deaths), Population=sum(as.numeric(Population)))
dataYear$Crude.Rate <- (as.numeric(dataYear$Deaths)/as.numeric(dataYear$Population))*100000
View(dataYear)
dataYear<- dataTotal  %>%
select(Year, Deaths, Population) %>%
group_by(Year) %>%
summarize(Deaths=sum(Deaths), Population=sum(as.numeric(Population)))
dataYear$Crude.Rate <- (as.numeric(dataYear$Deaths)/as.numeric(dataYear$Population))*100000
dataYear$State <- "National"
View(dataYear)
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Map and Bar Chart')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
shiny::runApp('IS608/Question2/Line Graph')
